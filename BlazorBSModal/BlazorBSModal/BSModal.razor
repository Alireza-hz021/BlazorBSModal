@namespace BlazorBSModal

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay;@(DirectionRTL?"direction: rtl;":"")">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
                <button @onclick="() => Close()" type="button" style="@(DirectionRTL?"margin: -1rem auto -1rem -1rem;":"")" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @ModalBodyContentHtml
            </div>
            <div class="modal-footer">
                @ModalFooterHtmlWhitoutCloseBtn
                @*<button type="button" class="btn btn-primary">Save changes</button>*@
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">@CloseBtnText</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter] public string ModalTitle { get; set; }
    [Parameter] public string CloseBtnText { get; set; } = "Close";
    [Parameter] public bool DirectionRTL { get; set; }
    [Parameter] public RenderFragment ModalBodyContentHtml { get; set; }
    [Parameter] public RenderFragment ModalFooterHtmlWhitoutCloseBtn { get; set; }
    [Parameter] public EventCallback OnCloseModal { get; set; }
    [Parameter] public EventCallback OnOpenModal { get; set; }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public async Task Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
        await OnOpenModal.InvokeAsync();
    }

    public async Task Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        await OnCloseModal.InvokeAsync();
    }
}